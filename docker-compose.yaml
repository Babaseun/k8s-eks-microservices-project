services:
  products-api:
    image: products-api
    build:
      context: ./Product.Catalog.Services/Product.Catalog.Products/ProductService
      dockerfile: Dockerfile
    ports:
      - "7000:8080"
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Dev3
    networks:
      - app-network

  nginx:
    image: nginx
    ports:
      - "8000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - products-api
    networks:
      - app-network

  postgres-db:
    image: postgres:14
    ports:
      - "5430:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
#  docker build -t webapi ./Product.Catalog.Services/Product.Catalog.Products/ProductService -f Product.Catalog.Services/Product.Catalog.Products/ProductService/Dockerfile
